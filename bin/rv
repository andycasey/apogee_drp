#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Jon Holtzman, David Nidever
# @Date: March 2018, Sep 2020
# @Filename: apred
# @License: BSD 3-Clause
# @Copyright: Jon Holtzman

# Run Doppler RV and visit combination for a single star

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import time
import datetime
import glob
from holtztools import struct
import numpy as np
from astropy.table import Table,Column
import logging

from apogee_drp.apred import rv
from apogee_drp.utils import bitmask,apload
from dlnpyutils import utils as dln

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Runs RVs')

    parser.add_argument('star', type=str, nargs=1,  help='Star Name')
    parser.add_argument('apred', type=str, nargs=1, help='APOGEE reduction version')
    parser.add_argument('telescope', type=str, nargs=1, help='APOGEE telescope (apo25m, lco25m, apo1m)')
    parser.add_argument("--nres",type=float,nargs=3,help='list of sinc widths',default=[5,4.25,3.5])
    parser.add_argument("--windows",type=float,nargs=1,help='Spectral windows')
    parser.add_argument('--tweak', action='store_true', help='do normalization tweak?')
    parser.add_argument("--flag",type=str,default='11111')
    parser.add_argument('-c','--clobber', action='store_true', help='Overwrite files?')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')
    parser.add_argument('-p','--plot', action='store_true', help='Make a plot')
    parser.add_argument('-l','--list', action='store_true', help='Input is list of star names')
    args = parser.parse_args()

    logger = dln.basiclogger()
    logger.handlers[0].setFormatter(logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s"))
    logger.handlers[0].setStream(sys.stdout)   

    now = datetime.datetime.now()
    start = time.time()
    logger.info("Start: "+now.strftime("%Y-%m-%d %H:%M:%S"))

    # Code copied from rv.dopple_rv()
    star = args.star[0]
    apred = args.apred[0]
    telescope = args.telescope[0]

    # Input list of 
    islist = args.list
    if islist==True:
        logger.info('Input list of star names')
        inlist = star
        stars = dln.readlines(inlist)
        nstars = len(stars)
        logger.info(str(nstars)+' names')
        # Loop over stars
        for i,star in enumerate(stars):
            star = star.strip()
            logger.info(' ')
            logger.info(str(i+1)+' '+star)
            logger.info('--------------------')
            # Run doppler_rv_star() for this star
            try:
                rv.doppler_rv(star,apred,telescope,clobber=args.clobber,tweak=args.tweak,
                              nres=args.nres,windows=args.windows,verbose=args.verbose,
                              plot=args.plot,logger=logger)
            except:
                logger.exception('Error running Doppler on '+star)
    
    # Single star
    else:
        # Run doppler_rv_star() for this star
        rv.doppler_rv(star,apred,telescope,clobber=args.clobber,tweak=args.tweak,
                      nres=args.nres,windows=args.windows,verbose=args.verbose,
                      plot=args.plot,logger=logger)

    now = datetime.datetime.now()
    logger.info("End: "+now.strftime("%Y-%m-%d %H:%M:%S"))
    logger.info("elapsed: %0.1f sec." % (time.time()-start))
