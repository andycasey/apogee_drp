#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Jon Holtzman, David Nidever
# @Date: March 2018, Sep 2020
# @Filename: apred
# @License: BSD 3-Clause
# @Copyright: Jon Holtzman

# Run Doppler RV and visit combination for all stars in a plate visit

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import time
import datetime
import glob
from holtztools import struct
import numpy as np
from astropy.table import Table,Column
from astropy.io import fits
import logging
import traceback

from apogee_drp.apred import rv
from apogee_drp.utils import bitmask,apload,plan
from dlnpyutils import utils as dln

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Runs RVs')

    parser.add_argument('planfile', type=str, nargs=1,  help='Plan file')
    parser.add_argument("--nres",type=float,nargs=3,help='list of sinc widths',default=[5,4.25,3.5])
    parser.add_argument("--windows",type=float,nargs=1,help='Spectral windows')
    parser.add_argument('--tweak', action='store_true', help='do normalization tweak?')
    parser.add_argument("--flag",type=str,default='11111')
    parser.add_argument('-c','--clobber', action='store_true', help='Overwrite files?')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')
    parser.add_argument('-p','--plot', action='store_true', help='Make a plot')
    args = parser.parse_args()
    planfile = args.planfile[0]

    # Make sure plan file exists
    if os.path.exists(planfile)==False:
        raise ValueError(planfile+' NOT FOUND')
    # Load the plan file
    planstr = plan.load(planfile,np=True)
    apred = planstr['apred_vers'].strip("'")
    telescope = planstr['telescope'].strip("'")
    plate = str(planstr['plateid']).strip("'")
    mjd = planstr['mjd']
    if planstr.get('field') is not None:
        field = planstr['field'].strip("'")
    else:
        field = None

    logger = dln.basiclogger()
    logger.handlers[0].setFormatter(logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s"))
    logger.handlers[0].setStream(sys.stdout)   

    now = datetime.datetime.now()
    start = time.time()
    logger.info("Start: "+now.strftime("%Y-%m-%d %H:%M:%S"))


    # Get all of the stars from apVisitSum file
    load = apload.ApLoad(apred=apred,telescope=telescope)
    apvisitsumfile = load.filename('VisitSum',plate=plate,mjd=mjd,field=field)
    if os.path.exists(apvisitsumfile)==False:
        raise ValueError(apvisitsumfile+" NOT FOUND")
    logger.info('Loading '+apvisitsumfile)
    visitsum = fits.getdata(apvisitsumfile,1)
    # Remove rows with missing/blank apogee_ids
    bd, = np.where((visitsum['apogee_id']=='') | (visitsum['apogee_id']=='None'))
    if len(bd)>0:
        visitsum = np.delete(visitsum,bd)
    nstar = len(visitsum)
    logger.info(str(nstar)+' stars')

    # Loop over stars
    for i,star in enumerate(visitsum['apogee_id']):
        logger.info(' ')
        logger.info(str(i+1)+' '+star)
        logger.info('--------------------')

        # Run doppler_rv_star() for this star
        try:
            rv.doppler_rv(star,apred,telescope,clobber=args.clobber,tweak=args.tweak,
                          nres=args.nres,windows=args.windows,verbose=args.verbose,
                          plot=args.plot,logger=logger,mjd=mjd)
        except:
            logger.exception('Error running Doppler on '+star)

    now = datetime.datetime.now()
    logger.info("End: "+now.strftime("%Y-%m-%d %H:%M:%S"))
    logger.info("elapsed: %0.1f sec." % (time.time()-start))
