#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Jon Holtzman, David Nidever
# @Date: March 2018, Sep 2020
# @Filename: apred
# @License: BSD 3-Clause
# @Copyright: Jon Holtzman

# Run Doppler RV and visit combination for a single star

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import subprocess
import pdb
import time
import datetime
import glob
from holtztools import struct
import numpy as np
from astropy.table import Table,Column

from apogee_drp.apred import rv
from apogee_drp.utils import bitmask,apload

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Runs RVs')

    parser.add_argument('star', type=str, nargs=1,  help='Star Name')
    parser.add_argument('apred', type=str, nargs=1, help='APOGEE reduction version')
    parser.add_argument('instrument', type=str, nargs=1, help='APOGEE instrument')
    parser.add_argument('field', type=str, nargs=1, help='Field name')
    parser.add_argument("--nres",type=float,nargs=3,help='list of sinc widths',default=[5,4.25,3.5])
    parser.add_argument("--windows",type=float,nargs=1,help='Spectral windows')
    parser.add_argument('--tweak', action='store_true', help='do normalization tweak?')
    parser.add_argument("--done")
    parser.add_argument("--host")
    parser.add_argument("--flag",type=str,default='11111')
    parser.add_argument('-c','--clobber', action='store_true', help='Overwrite files?')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')
    parser.add_argument('-p','--plot', action='store_true', help='Make a plot')
    args = parser.parse_args()

    now = datetime.datetime.now()
    start = time.time()
    print("Start: ",now.strftime("%Y-%m-%d %H:%M:%S"))

    # Code copied from rv.dopple_rv()
    star = args.star[0]
    apred = args.apred[0]
    instrument = args.instrument[0]
    if instrument=='apogee-n':
        telescope = 'apo25m'
    if instrument=='apogee-s':
        telescope = 'lco25m'
    field = args.field[0]
    clobber = args.clobber
    tweak = args.tweak
    nres = args.nres
    windows = args.windows
    verbose = args.verbose
    plot = args.plot
    snmin = 3
    apstar_vers = 'stars'

    # Get all the VisitSum files for this field and concatenate them
    files = glob.glob(os.environ['APOGEE_REDUX']+'/'+apred+'/visit/'+telescope+'/'+field+'/apVisitSum*')
    if len(files) == 0 :
        print('no apVisitSum files found for {:s}'.format(field))
        sys.exit()
    else :
        allvisits = struct.concat(files)
    starmask = bitmask.StarBitMask()
    gd = np.where(((allvisits['STARFLAG'] & starmask.badval()) == 0) &
                  (allvisits['APOGEE_ID'] != b'') &
                  (allvisits['SNR'] > snmin) )[0]
    print(len(allvisits),len(gd))
    allvisits = Table(allvisits)
    # Change datatype of STARFLAG to 64-bit
    allvisits['STARFLAG'] = allvisits['STARFLAG'].astype(np.uint64)

    # Output directory
    load = apload.ApLoad(apred=apred,telescope=telescope)
    outfield = load.filename('Field',field=field)
    #outfield = outfield.replace('/stars/','/'+apstar_vers+'/')
    try : os.makedirs(os.path.dirname(outfield))
    except FileExistsError: pass

    # Get visit files
    stargd = np.where(allvisits['APOGEE_ID'][gd] == star)[0]
    nvisits = len(stargd)
    print('object: {:}  nvisits: {:d}'.format(star,nvisits))
    if nvisits == 0:
        print('No visit files for '+star)
        sys.exit()
    starvisits = allvisits[gd[stargd]]

    # The inputs for dorv()
    speclist = [starvisits,load,(field,star,clobber,verbose,tweak,plot,windows,apstar_vers)]

    try:
        out = rv.dorv(speclist)
        print('rv completed successfully for {:s}'.format(star))
    except:
        print('rv failed for {:s}'.format(star))
        raise


    # First rename old visit RV tags and initialize new ones
    for col in ['VTYPE','VREL','VRELERR','VHELIO','BC','RV_TEFF','RV_LOGG','RV_FEH','RV_CARB','RV_ALPHA']:
        starvisits.rename_column(col,'EST'+col)
        if col == 'VTYPE':
            starvisits[col] = 0
        else:
            starvisits[col] = np.nan
    for col in ['XCORR_VREL','XCORR_VRELERR','XCORR_VHELIO','BC']:
        starvisits[col] = np.nan

    # Add columns for RV components
    starvisits['N_COMPONENTS'] = -1
    rv_components = Column(name='RV_COMPONENTS',dtype=float,shape=(3),length=len(starvisits))
    starvisits.add_column(rv_components)

    # Now load the new ones with the dorv() output
    allv = []
    visits = []
    ncomponents = 0
    files = speclist
    for i,(v,g) in enumerate(zip(out[0][1],out[1])) :
        # Match by filename components in case there was an error reading in doppler
        name = os.path.basename(v['filename']).replace('.fits','').split('-')
        if telescope == 'apo1m':
            visit = np.where( np.char.strip(starvisits['FILE']).astype(str) == os.path.basename(v['filename'].strip()) )[0]
            if len(visit) == 0:
                # special case for incremental release...yuck
                visit = np.where( np.char.strip(starvisits['FILE']).astype(str) == 
                                  os.path.basename(v['filename'].strip()).replace('-r13-','-r12-') )[0]
        else:
            visit = np.where( (np.char.strip(starvisits['PLATE']).astype(str) == name[-3]) &
                              (starvisits['MJD'] == int(name[-2])) &
                              (starvisits['FIBERID'] == int(name[-1])) )[0]
        if len(visit) > 0:
            visit = visit[0]
        else:
            continue
        visits.append(visit)
        #import pdb; pdb.set_trace()
        starvisits[visit]['VREL'] = v['vrel']
        starvisits[visit]['VRELERR'] = v['vrelerr']
        starvisits[visit]['VHELIO'] = v['vhelio']
        starvisits[visit]['XCORR_VREL'] = v['xcorr_vrel']
        starvisits[visit]['XCORR_VRELERR'] = v['xcorr_vrelerr']
        starvisits[visit]['XCORR_VHELIO'] = v['xcorr_vhelio']
        starvisits[visit]['BC'] = v['bc']
        starvisits[visit]['RV_TEFF'] = v['teff']
        starvisits[visit]['RV_LOGG'] = v['logg']
        starvisits[visit]['RV_FEH'] = v['feh']
        if g is None:
            starvisits[visit]['N_COMPONENTS']=0
        else:
            starvisits[visit]['N_COMPONENTS']=g['N_components']
        if starvisits[visit]['N_COMPONENTS'] > 1 :
            starvisits[visit]['STARFLAG'] |= starmask.getval('MULTIPLE_SUSPECT')
            n = len(g['best_fit_parameters'])//3
            gd = np.where(np.array(g['best_fit_parameters'])[0:n] > 0)[0]
            rv_comp = np.array(g['best_fit_parameters'])[2*n+gd]
            n_rv_comp = np.min([3,len(rv_comp)])
            starvisits[visit]['RV_COMPONENTS'][0:n_rv_comp] = rv_comp[0:n_rv_comp]
        # flag visits with suspect RVs
        if starvisits[visit]['RV_TEFF'] < 6000:
            bd_diff = 10
        else:
            bd_diff = 50.
        if (np.abs(starvisits[visit]['VHELIO']-starvisits[visit]['XCORR_VHELIO']) > bd_diff) :
            starvisits[visit]['STARFLAG'] |= starmask.getval('RV_REJECT')
        elif (np.abs(starvisits[visit]['VHELIO']-starvisits[visit]['XCORR_VHELIO']) > 0) :
            starvisits[visit]['STARFLAG'] |= starmask.getval('RV_SUSPECT')

    if len(visits) > 0 :
        visits = np.array(visits)
        # set up visit combination, removing visits with suspect RVs
        apogee_id = files[-1][1]
        if type(apogee_id) is not str: apogee_id = apogee_id.decode() 
        gdrv = np.where((starvisits[visits]['STARFLAG'] & starmask.getval('RV_REJECT')) == 0)[0]
        if len(gdrv) > 0 : 
            allv = [starvisits[visits[gdrv]],load,(field,apogee_id,clobber,apstar_vers,nres)]

    # Do the visit combination
    if len(allv)>0:
        combout = rv.dovisitcomb(allv)
    else:
        print('No good visits for '+star)
        raise


    now = datetime.datetime.now()
    print("End: ",now.strftime("%Y-%m-%d %H:%M:%S"))
    print("elapsed: ",time.time()-start)

    #if args.done is not None :
    #    subprocess.call(['setdone',args.done])
    #    try: 
    #        subprocess.call(['setdone',done])
    #    except: pass
    #    print('host', args.host)
    #    if args.host is not None :
    #        try: os.remove(args.done+'.'+args.host)
    #        except: pass
